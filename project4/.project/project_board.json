{
  "sprints": {
    "Sprint 1": {
      "goal": "Setup project structure, implement grid rendering, and initialize snake movement with Pygame.",
      "tasks": [
        {
          "assignee": "Coder",
          "task_description": "Create and render a visual grid on the Pygame window. Implement the main game loop structure.",
          "task_name": "Implement grid rendering and game loop",
          "id": 1,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Set up a new Python project, create necessary folders/files, and initialize a Pygame window with a visual grid for the snake game.",
          "task_name": "Set up project structure and initialize Pygame window",
          "id": 2,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Create a data structure for the snake, display it on the grid, and enable movement using the arrow keys.",
          "task_name": "Implement snake representation and basic movement with arrow key input",
          "id": 3,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Add a requirements.txt file listing Pygame and any other required libraries.",
          "task_name": "Create requirements.txt with needed dependencies",
          "id": 4,
          "done": false
        }
      ]
    },
    "Sprint 2": {
      "goal": "Add apple spawning, snake growth, collision detection, scoring, and organize code into logical modules.",
      "tasks": [
        {
          "assignee": "Coder",
          "task_description": "Update the snake data structure to grow longer each time it eats an apple.",
          "task_name": "Implement snake growth when apple is eaten",
          "id": 5,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Implement score tracking and render the current player's score in the game window.",
          "task_name": "Display the player's score on the screen",
          "id": 6,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Create functionality for spawning an apple at a random grid location not occupied by the snake.",
          "task_name": "Implement apple spawning logic",
          "id": 7,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Organize the codebase into logical modules for game loop, rendering, input handling, and collision logic as separate components/files.",
          "task_name": "Refactor and modularize the code",
          "id": 8,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Add logic to detect if the snake has collided with the wall or itself, and end the game accordingly.",
          "task_name": "Implement collision detection with walls and self",
          "id": 9,
          "done": false
        },
        {
          "assignee": "Documenter",
          "task_description": "Generate clear and concise documentation for each module, class, and function in the codebase to assist future developers. Place documentation in suitable files or as docstrings.",
          "task_name": "Create code documentation for all modules and functions",
          "id": 10,
          "done": false
        }
      ]
    }
  },
  "backlog": [],
  "metadata": {
    "num_tasks": 10
  }
}