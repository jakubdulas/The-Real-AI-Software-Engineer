{
  "sprints": {
    "Sprint 1": {
      "goal": "Develop core components for the Snake game: basic grid rendering, input handling, and snake movement.",
      "tasks": [
        {
          "assignee": "Coder",
          "task_description": "Initialize a Python project for the Snake game, set up the main file, and include a requirements.txt listing Pygame as a dependency.",
          "task_name": "Set up Pygame project and create requirements.txt",
          "id": 1,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Create the game window and render a visible grid that will be the playground for the Snake game using Pygame graphics primitives.",
          "task_name": "Implement visual grid rendering in Pygame",
          "id": 2,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Create logic and code to represent the snake as a modular structure (for example, a list of coordinates for its body), and implement its movement in the game loop. The snake should move according to the current movement direction each frame.",
          "task_name": "Implement snake movement and body structure",
          "id": 3,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Add event handlers to capture arrow key inputs and update the snake's movement direction, ensuring the snake cannot reverse into itself directly.",
          "task_name": "Implement arrow key input handling for snake direction",
          "id": 4,
          "done": false
        }
      ]
    },
    "Sprint 2": {
      "goal": "Implement apple spawning, collision logic, score display, and modularize core components.",
      "tasks": [
        {
          "assignee": "Coder",
          "task_description": "Make the snake grow when it eats the apple, increase the score, and respawn the apple in a new position.",
          "task_name": "Implement snake growth and apple consumption logic",
          "id": 5,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Add logic to randomly spawn an apple on the grid, ensuring it doesn't overlap with the snake's body. This includes creating the apple object/component.",
          "task_name": "Implement apple spawning logic",
          "id": 6,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Add logic to detect when the snake collides with the wall or itself, and end the game accordingly.",
          "task_name": "Implement collision detection with walls and self",
          "id": 7,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Organize the codebase into logical components or classes (game loop, rendering, input handling, collision logic, etc.) for better readability and maintainability.",
          "task_name": "Refactor code into modular components",
          "id": 8,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Render the current score on the game window using Pygame's text rendering capabilities, updating it when the snake eats an apple.",
          "task_name": "Display score on game window",
          "id": 9,
          "done": false
        }
      ]
    },
    "Sprint 3": {
      "goal": "Document the modular Snake game implementation and usage instructions.",
      "tasks": [
        {
          "assignee": "Documenter",
          "task_description": "Explain how to install dependencies from requirements.txt, how to run the game, and basic controls for the player in a clear README file.",
          "task_name": "Write usage and setup instructions",
          "id": 10,
          "done": false
        },
        {
          "assignee": "Documenter",
          "task_description": "Document all code components, classes, and functions. Explain the structure, major logical parts (game loop, rendering, input handling, collision, etc.), and how to extend or modify the game.",
          "task_name": "Create comprehensive code documentation",
          "id": 11,
          "done": false
        }
      ]
    }
  },
  "backlog": [],
  "metadata": {
    "num_tasks": 11
  }
}