{
  "sprints": {
    "Sprint 1": {
      "goal": "Set up project structure and implement note data model.",
      "tasks": [
        {
          "assignee": "Coder",
          "task_description": "Create the initial project directory and empty Python files according to the planned modular structure.",
          "task_name": "Set up project folder structure with main.py, note.py, storage.py, and utils.py files",
          "id": 1,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Design and implement a Note class containing title, content, and timestamp attributes, with relevant initialization and methods for serialization (to_dict, from_dict).",
          "task_name": "Implement Note class in note.py",
          "id": 2,
          "done": false
        },
        {
          "assignee": "Researcher",
          "task_description": "Discover best patterns for structure, input handling, and JSON serialization/deserialization for CLI Python apps to apply in implementation.",
          "task_name": "Research best practices for modular Python CLI apps and JSON serialization",
          "id": 3,
          "done": false
        }
      ]
    },
    "Sprint 2": {
      "goal": "Implement storage and basic CLI for note management (add, view, delete notes).",
      "tasks": [
        {
          "assignee": "Coder",
          "task_description": "Create utility functions, such as input validation and timestamp formatting, to support the main CLI and module logic.",
          "task_name": "Implement helper functions in utils.py",
          "id": 4,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Develop the terminal menu system for adding, viewing, and deleting notes. Integrate with storage and note modules and ensure a clear separation between user interaction and business logic.",
          "task_name": "Implement CLI and menu logic in main.py",
          "id": 5,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Write functions for saving notes to and loading notes from a JSON file. Ensure data integrity and proper error handling.",
          "task_name": "Implement storage logic in storage.py",
          "id": 6,
          "done": false
        }
      ]
    },
    "Sprint 3": {
      "goal": "Code review, testing, and final documentation for note manager app.",
      "tasks": [
        {
          "assignee": "Documenter",
          "task_description": "Document each module (main.py, note.py, storage.py, utils.py) and prepare a README file with setup and usage instructions.",
          "task_name": "Document all modules and create README",
          "id": 7,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Manually or programmatically test the main functionalities and edge cases for the command-line menu, storage, and note serialization. Validate input handling and error messages.",
          "task_name": "Test core functionalities (add, delete, view notes) in CLI",
          "id": 8,
          "done": false
        }
      ]
    }
  },
  "backlog": [],
  "metadata": {
    "num_tasks": 7
  }
}