{
  "sprints": {
    "Sprint 1": {
      "goal": "Set up backend REST API for TODO list application with CRUD endpoints.",
      "tasks": [
        {
          "assignee": "Coder",
          "task_description": "Create the base directories: backend/ for backend code, frontend/ for frontend code. Ensure they are in the project root to keep codebase organized.",
          "task_name": "Set up project structure with backend/ and frontend/ directories.",
          "id": 1,
          "done": false
        },
        {
          "assignee": "Researcher",
          "task_description": "Evaluate Flask, Django REST Framework, and FastAPI for building a simple TODO REST API. Recommend the most suitable option for this project in terms of ease, speed, and maintainability.",
          "task_name": "Research and select a backend framework (Flask, Django REST, or FastAPI) for the API.",
          "id": 2,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Initialize selected backend framework with a basic app structure inside backend/. Set up entrypoint file (e.g. app.py or main.py), and dependencies file (requirements.txt or pyproject.toml).",
          "task_name": "Implement backend REST API boilerplate setup",
          "id": 3,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Define the data model for a TODO item: title (string), status (boolean, done or not), due date (optional, date). Prepare it for CRUD operations in the backend.",
          "task_name": "Design TODO model/schema for backend API",
          "id": 4,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Develop REST API endpoints: GET /tasks, POST /tasks, PATCH /tasks/{id}, DELETE /tasks/{id} using the defined TODO model. Ensure endpoints perform create, read, update, and delete on TODO items.",
          "task_name": "Implement CRUD API endpoints for TODO items",
          "id": 5,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Implement simple in-memory storage (such as a list or dictionary) for managing TODO items while API endpoints are developed, instead of a database.",
          "task_name": "Basic in-memory storage for TODO items",
          "id": 6,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Manually or programmatically test GET, POST, PATCH, and DELETE endpoints to ensure the TODO API works as expected. Check that CRUD operations behave correctly for TODO items.",
          "task_name": "Test backend API endpoints locally",
          "id": 7,
          "done": false
        }
      ]
    },
    "Sprint 2": {
      "goal": "Develop the frontend to connect with the backend API and provide basic UI for managing TODOs.",
      "tasks": [
        {
          "assignee": "Coder",
          "task_description": "Create an index.html file inside frontend/ with basic HTML, including the containers for the list of tasks and form elements for adding tasks.",
          "task_name": "Set up basic HTML structure for TODO frontend",
          "id": 8,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Write frontend JavaScript (e.g., in main.js) that uses fetch() to GET all tasks from the backend API and display them in the task list section.",
          "task_name": "Implement JavaScript logic to fetch and display all tasks from backend API",
          "id": 9,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Add a form element and use JavaScript to POST new tasks to the backend API. Ensure tasks added appear instantly on the task list after creation.",
          "task_name": "Add frontend form and logic to create new tasks via API calls",
          "id": 10,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Add a delete button to each listed task in the frontend. Implement JavaScript logic to send DELETE requests to the backend API to remove tasks and update the UI accordingly.",
          "task_name": "Add frontend delete button and logic for each task",
          "id": 11,
          "done": false
        },
        {
          "assignee": "Coder",
          "task_description": "Add a simple CSS file (styles.css) or use inline styles to give the TODO list basic structure and spacing. Ensure the UI is clean and easy to interact with.",
          "task_name": "Apply minimal styling to the frontend TODO app",
          "id": 12,
          "done": false
        }
      ]
    },
    "Sprint 3": {
      "goal": "Document how to run the backend and frontend locally and add code documentation.",
      "tasks": [
        {
          "assignee": "Documenter",
          "task_description": "Create a README.md in the project root explaining how to set up and run the backend and frontend locally, including prerequisites and example usage.",
          "task_name": "Write README with local setup instructions",
          "id": 13,
          "done": false
        },
        {
          "assignee": "Documenter",
          "task_description": "Ensure all Python and JavaScript files have appropriate docstrings and inline comments to explain logic and endpoints. Include file/module-level docstrings where applicable.",
          "task_name": "Add code documentation (docstrings, comments) to backend and frontend code",
          "id": 14,
          "done": false
        }
      ]
    }
  },
  "backlog": [],
  "metadata": {
    "num_tasks": 14
  }
}